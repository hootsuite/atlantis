// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/hootsuite/atlantis/server/events (interfaces: ModifiedProjectFinder)

package mocks

import (
	"reflect"

	models "github.com/hootsuite/atlantis/server/events/models"
	logging "github.com/hootsuite/atlantis/server/logging"
	pegomock "github.com/petergtz/pegomock"
)

type MockModifiedProjectFinder struct {
	fail func(message string, callerSkip ...int)
}

func NewMockModifiedProjectFinder() *MockModifiedProjectFinder {
	return &MockModifiedProjectFinder{fail: pegomock.GlobalFailHandler}
}

func (mock *MockModifiedProjectFinder) FindModified(log *logging.SimpleLogger, modifiedFiles []string, repoFullName string) []models.Project {
	params := []pegomock.Param{log, modifiedFiles, repoFullName}
	result := pegomock.GetGenericMockFrom(mock).Invoke("FindModified", params, []reflect.Type{reflect.TypeOf((*[]models.Project)(nil)).Elem()})
	var ret0 []models.Project
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]models.Project)
		}
	}
	return ret0
}

func (mock *MockModifiedProjectFinder) VerifyWasCalledOnce() *VerifierModifiedProjectFinder {
	return &VerifierModifiedProjectFinder{mock, pegomock.Times(1), nil}
}

func (mock *MockModifiedProjectFinder) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierModifiedProjectFinder {
	return &VerifierModifiedProjectFinder{mock, invocationCountMatcher, nil}
}

func (mock *MockModifiedProjectFinder) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierModifiedProjectFinder {
	return &VerifierModifiedProjectFinder{mock, invocationCountMatcher, inOrderContext}
}

type VerifierModifiedProjectFinder struct {
	mock                   *MockModifiedProjectFinder
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierModifiedProjectFinder) FindModified(log *logging.SimpleLogger, modifiedFiles []string, repoFullName string) *ModifiedProjectFinder_FindModified_OngoingVerification {
	params := []pegomock.Param{log, modifiedFiles, repoFullName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "FindModified", params)
	return &ModifiedProjectFinder_FindModified_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type ModifiedProjectFinder_FindModified_OngoingVerification struct {
	mock              *MockModifiedProjectFinder
	methodInvocations []pegomock.MethodInvocation
}

func (c *ModifiedProjectFinder_FindModified_OngoingVerification) GetCapturedArguments() (*logging.SimpleLogger, []string, string) {
	log, modifiedFiles, repoFullName := c.GetAllCapturedArguments()
	return log[len(log)-1], modifiedFiles[len(modifiedFiles)-1], repoFullName[len(repoFullName)-1]
}

func (c *ModifiedProjectFinder_FindModified_OngoingVerification) GetAllCapturedArguments() (_param0 []*logging.SimpleLogger, _param1 [][]string, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*logging.SimpleLogger, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*logging.SimpleLogger)
		}
		_param1 = make([][]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]string)
		}
		_param2 = make([]string, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}
